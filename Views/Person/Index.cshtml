@model PersoneManagement.Web.Models.DTO.PersonDTO


@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.7/css/fixedHeader.dataTables.min.css">
    <style>
        .dataTables_wrapper {
            width: 900px;
        }

            .dataTables_wrapper .dataTables_paginate {
                float: none;
                text-align: center;
            }

            .dataTables_wrapper .dataTables_info {
                float: left;
                padding-top: 0.755em;
            }

            .dataTables_wrapper .bottom {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
    </style>
}

<h2>Person Management</h2>

<button id="createButton" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">
    +Add New Person
</button>

<table class="table" id="personData">
    <thead>
        <tr>
            <th>Actions</th>
            <th>No.</th>
            <th>
                Title
            </th>
            <th>
                Full Name
            </th>
            <th>
                Modified Date
            </th>
        </tr>
    </thead>


</table>


@*Create Modal*@

<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create New Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form Starts Here -->
                @using (Html.BeginForm("Create", "Person", FormMethod.Post, new { id = "createForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>PersonDTO</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.PersonType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(
                                        model => model.PersonType,
                                        new SelectList(new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "GC", Value = "GC" },
                                            new SelectListItem { Text = "SP", Value = "SP" },
                                            new SelectListItem { Text = "EM", Value = "EM" },
                                            new SelectListItem { Text = "IN", Value = "IN" },
                                            new SelectListItem { Text = "VC", Value = "VC" },
                                            new SelectListItem { Text = "SC", Value = "SC" }
                                        }, "Value", "Text"),
                                        "Select Person Type",
                                        new { @class = "form-control" }
                                        )
                                @Html.ValidationMessageFor(model => model.PersonType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.NameStyle, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.NameStyle)
                                    @Html.ValidationMessageFor(model => model.NameStyle, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(
                                    model => model.Title,
                                    new SelectList(new List<SelectListItem>
                                    {
                                        new SelectListItem { Text = "Mr.", Value = "Mr." },
                                        new SelectListItem { Text = "Mrs.", Value = "Mrs." },
                                        new SelectListItem { Text = "Ms.", Value = "Ms." }
                                    }, "Value", "Text"),
                                    "Select Title",
                                    new { @class = "form-control" }
                                    )
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Suffix, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Suffix, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Suffix, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailPromotion, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EmailPromotion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EmailPromotion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
</div>



@*EditModal*@

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Room</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form Starts Here -->
                @using (Html.BeginForm("Edit", "Person", FormMethod.Post, new { id = "editForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>PersonDTO</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.BusinessEntityID)

                        <div class="form-group">
                            @Html.LabelFor(model => model.PersonType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(
                                        model => model.PersonType,
                                        new SelectList(new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "GC", Value = "GC" },
                                            new SelectListItem { Text = "SP", Value = "SP" },
                                            new SelectListItem { Text = "EM", Value = "EM" },
                                            new SelectListItem { Text = "IN", Value = "IN" },
                                            new SelectListItem { Text = "VC", Value = "VC" },
                                            new SelectListItem { Text = "SC", Value = "SC" }
                                        }, "Value", "Text"),
                                        "Select Person Type",
                                        new { @class = "form-control" }
                                        )
                                @Html.ValidationMessageFor(model => model.PersonType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.NameStyle, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.NameStyle)
                                    @Html.ValidationMessageFor(model => model.NameStyle, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(
                                    model => model.Title,
                                    new SelectList(new List<SelectListItem>
                                    {
                                        new SelectListItem { Text = "Mr.", Value = "Mr." },
                                        new SelectListItem { Text = "Mrs.", Value = "Mrs." },
                                        new SelectListItem { Text = "Ms.", Value = "Ms." }
                                    }, "Value", "Text"),
                                    "Select Title",
                                    new { @class = "form-control" }
                                    )
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Suffix, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Suffix, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Suffix, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailPromotion, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EmailPromotion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EmailPromotion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>


@*Details Modal*@

<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Person Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.PersonType)
                        </dt>

                        <dd id="PersonType"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.NameStyle)
                        </dt>
                        <dd id="NameStyle"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Title)
                        </dt>

                        <dd id="Title"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.FirstName)
                        </dt>
                        <dd id="FirstName"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.MiddleName)
                        </dt>

                        <dd id="MiddleName"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.LastName)
                        </dt>

                        <dd id="LastName"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Suffix)
                        </dt>
                        <dd id="Suffix"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.EmailPromotion)
                        </dt>
                        <dd id="EmailPromotion"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.rowguid)
                        </dt>

                        <dd id="rowguid"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.ModifiedDate)
                        </dt>

                        <dd id="ModifiedDate"> </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.FullName)
                        </dt>

                        <dd id="FullName"> </dd>

                    </dl>
                </div>
            </div>
        </div>
    </div>
</div>




@section scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.7/js/dataTables.fixedHeader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        $(document).on('click', '#detailButton', function () {
            var personId = $(this).data('id'); // Get the ProductCategoryID from the button's data-id attribute

            // Make an AJAX request to get the data for the selected ProductCategory
            $.ajax({
                url: '/Person/GetPersonDetails/' + personId, // URL to fetch data for the specific category
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    // Populate the form fields with the data returned from the server
                    $('#detailModal #PersonType').text(response.PersonType);
                    $('#detailModal #NameStyle').text(response.NameStyle);
                    $('#detailModal #Title').text(response.Title);
                    $('#detailModal #FirstName').text(response.FirstName);
                    $('#detailModal #MiddleName').text(response.MiddleName);
                    $('#detailModal #LastName').text(response.LastName);
                    $('#detailModal #Suffix').text(response.Suffix);
                    $('#detailModal #EmailPromotion').text(response.EmailPromotion);
                    $('#detailModal #rowguid').text(response.rowguid);
                    $('#detailModal #ModifiedDate').text(response.ModifiedDate);
                    $('#detailModal #FullName').text(response.FullName);


                    // Show the Edit Modal
                    $('#detailModal').modal('show');
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while fetching data.');
                }
            });
        });


$(document).ready(function () {
    var table = $('#personData').DataTable({
        "ajax": {
            "url": "/Person/GetPersons",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            {
                "data": null,
                "render": function (data, type, row) {
                    var editLink = '@Url.Action("Edit", "Person", new { id = "PLACEHOLDER"})'.replace("PLACEHOLDER", row.BusinessEntityID);
                    var detailsLink = '@Url.Action("Details", "Person", new { id = "PLACEHOLDER" })'.replace("PLACEHOLDER", row.BusinessEntityID);
                    var addressLink = '@Url.Action("Index", "Address", new { id = "PLACEHOLDER" })'.replace("PLACEHOLDER", row.BusinessEntityID);
                    return '<div class="btn-group">' +
                        '<a href=" javascript:void(0);" class="btn btn-primary" data-id="' + row.BusinessEntityID+ '" id="editButton" style="margin-right: 5px;">' +
                        'Edit</a>' +
                        '<a href="/Address/Index?personId=' + row.BusinessEntityID + '" class="btn btn-primary" "  style="margin-right: 5px;">' +
                        'Address</a>' +
                        '<a href="javascript:void(0);" class="btn btn-primary" data-id="' + row.BusinessEntityID + '" id="detailButton" style="margin-right: 5px;">' +
                        'Details</a>' +
                        '<button id="deleteButton" class="btn btn-danger deleteButton" data-id="' + row.BusinessEntityID + '">' +
                        'Delete</button>' +
                        '</div>'

                }
            },
            {
                "data": null,
                "render": function (data, type, row, meta) {
                    return meta.row + 1;  // Display the row number (meta.row is zero-indexed)
                }
            },
            { "data": "Title" },
            { "data": "FullName" },
            {
                "data": "ModifiedDate",
                "render": function (data, type, row) {
                    return moment(data).format('DD-MMM-YYYY HH:mm:ss');
                }
            },
        ],
/*                "order": [[0, "desc"]],*/
        "dom": '<"top"f>rt<"bottom"lpi><"clear">', // search on the top right, show entries, paging, showing on the bottom
        "pagingType": "full_numbers",
        "scrollY": "400px",
        "scrollX": true,
        "scrollCollapse": true,
        "fixedHeader": true,
        //"pagingType": "simple_numbers",
        "pageLength": 10,
        "lengthMenu": [10, 25, 50, 100],
        "scrollY": "400px",
        "scrollX": true,
        "scrollCollapse": true,
        "fixedHeader": true,
        "language": {
            "paginate": {
                "previous": "Previous",
                "next": "Next",
                "first": "<<",
                "last": ">>"
            }
        }
    });
});

////Use this for datatables, becase the buttons are created dynamically
$(document).on('click', '#deleteButton', function () {
    const itemId = $(this).data('id'); // Retrieve the ID of the item to delete

    Swal.fire({
        title: "Are you sure?",
        text: "Once deleted, you will not be able to recover this item!",
        icon: "warning",
        showCancelButton: true, // Enable the cancel button
        buttons: true,
        dangerMode: true,
    })
        .then((result) => {
            if (result.isConfirmed) {
                // Make an AJAX call to delete the item
                $.ajax({
                    url: '/Person/Delete', // URL of your Delete method
                    type: 'POST', // Use POST for data modification
                    data: { id: itemId }, // Pass the ID as data
                    success: function (response) {
                        if (response.success) {
                            Swal.fire("Deleted!", response.message, "success").then(() => {
                                $("#stateProvinceData").DataTable().ajax.reload(); // Reload the page or update UI
                            });
                        } else {
                            Swal.fire("Error!", response.message, "error");
                        }
                        Swal.fire("Poof! Your item has been deleted!", {
                            icon: "success",
                        }).then(() => {
                            // Optional: Reload the page or update the UI
                            location.reload();
                        });
                    },
                    error: function (error) {
                        Swal.fire("Error!", "Unable to delete the item. Please try again.", "error");
                    }
                });
            } else if (result.dismiss == Swal.DismissReason.cancel) {
                Swal.fire("Your item is safe!");
            }
        });
});

$(document).ready(function () {
    $('#createForm').submit(function (e) {
        e.preventDefault();

        $.ajax({
            url: $(this).attr('action'), // Form action URL
            type: 'POST',
            data: $(this).serialize(),
            success: function (response) {
                if (response.success) {
                    $('#createModal').modal('hide'); // Close modal
                    $('#personData').DataTable().ajax.reload(); // Reload DataTable
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: "Customer created succesfully",
                        timer: 5000,
                        timerProgressBar: true,
                        showConfirmButton: false
                    });

                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.errorMsg,
                        showConfirmButton: true // Show OK button
                    });

                }
            },
            error: function (xhr) {
                console.error(xhr.responseText);
                alert('An error occurred while saving.');
            }
        });
    });
});


        $(document).on('click', '#editButton', function () {
            var personId = $(this).data('id'); // Get the ProductCategoryID from the button's data-id attribute

            // Make an AJAX request to get the data for the selected ProductCategory
            $.ajax({
                url: '/Person/GetPersonId/' + personId, // URL to fetch data for the specific category
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    // Populate the form fields with the data returned from the server
                    $('#editModal #BusinessEntityID').val(response.BusinessEntityID); // Assuming you have a hidden field for ID
                    $('#editModal #PersonType').val(response.PersonType);
                    $('#editModal #NameStyle').val(response.NameStyle);
                    $('#editModal #Title').val(response.Title);
                    $('#editModal #FirstName').val(response.FirstName);
                    $('#editModal #MiddleName').val(response.MiddleName);
                    $('#editModal #LastName').val(response.LastName);
                    $('#editModal #Suffix').val(response.Suffix);
                    $('#editModal #EmailPromotion').val(response.EmailPromotion);

                    // Show the Edit Modal
                    $('#editModal').modal('show');
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while fetching data.');
                }
            });
        });

        $('#editForm').submit(function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'), // Form action URL
                type: 'POST',
                data: $(this).serialize(), // Serialize the form data
                success: function (response) {
                    if (response.success) {
                        $('#editModal').modal('hide'); // Close the modal
                        $('#personData').DataTable().ajax.reload(); // Reload the DataTable
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: "Edit Person Successful",
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.errorMsg,
                            showConfirmButton: true // Show OK button
                        });
                    }
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while saving.');
                }
            });
        });

    </script>

}
